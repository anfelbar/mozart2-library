BUILDTOP        = @BUILDTOP@
VPATH           = @srcdir@
SRCDIR          = @srcdir@

PREFIX          = @prefix@
OZPREFIX        = $(PREFIX)

OZBIN           = $(PREFIX)/bin
OZLIB           = $(PREFIX)/lib
IMAGESDIR       = $(OZLIB)/images
SHELL           = /bin/sh
LN_S            = @LN_S@
M4              = @M4@

INSTALL         = @INSTALL@
INSTALL_FILE    = $(INSTALL) -m 444
INSTALL_BIN     = $(INSTALL) -m 555
INSTALL_SRC     = @INSTALL_SRC@
INSTALL_DIR     = @INSTALL_DIR@

OZFLAGS         = -DLILO
OZC             = @OZC@

COMPILE         = $(OZC) $(OZFLAGS) -l ./Standard.ozf -c
EXEC            = $(OZC) $(OZFLAGS)
EXECWITHSTD     = $(OZC) $(OZFLAGS) -l ./Standard.ozf,Application
OZMA            = $(OZC) $(OZFLAGS) -DOZM --ozma

MAKE            = make -f Makefile-lilo

# exports
export BUILDTOP
export SRCDIR
export OZPREFIX
export OZLIB
export OZMAINIT = Init.ozc
export OZMAFILE = -u ozc.ozc
export OZPATH = .:$(SRCDIR)
export OZ_PI = 1
export OZ_LIB = $(OZLIB)
export OZ_LOAD = root=.:prefix=http\://www.ps.uni-sb.de/ozhome/lib/=$(OZ_LIB)/

SPSRC = System Debug Foreign Error Finalize
OPSRC = OS Open Component
APSRC = Application
CPSRC = Search FD FS
DPSRC = Connection Remote
WPSRC = Tk TkTools
MISCSRC = Misc

FUNCTORS = \
        $(SPSRC:%=%.ozf) \
        $(OPSRC:%=%.ozf) \
        $(APSRC:%=%.ozf) \
        $(CPSRC:%=%.ozf) \
        $(DPSRC:%=%.ozf) \
        $(WPSRC:%=%.ozf) \
        $(MISCSRC:%=%.ozf) \
        Compiler.ozf

SYSLETS = \
        ozc ozserver # ozvsserver

.PHONY: all install clean

all: $(FUNCTORS) $(SYSLETS)


#---------------------------------------------------------------------
# Init
#---------------------------------------------------------------------

INITSRC1 = URL.oz Prop.oz
INITSRC = $(INITSRC1:%=init/%) Init.oz

Init.ozc: Standard.ozf $(INITSRC)
        OZMAINIT="" $(COMPILE) Init.oz -o Init.ozc

#---------------------------------------------------------------------
# Standard
#---------------------------------------------------------------------

STANDARDSRC1 = \
        Forward.oz \
        Record.oz Unit.oz Tuple.oz Atom.oz Name.oz Procedure.oz \
        Int.oz Float.oz Number.oz Bool.oz List.oz Chunk.oz \
        Literal.oz Value.oz Cell.oz Lock.oz Char.oz String.oz \
        VirtualString.oz Object.oz Class.oz Loop.oz Port.oz \
        Time.oz Thread.oz Match.oz Type.oz Space.oz \
        Array.oz Dictionary.oz Exception.oz Lazy.oz Promise.oz \
        Functor.oz BitArray.oz
STANDARDSRC = $(STANDARDSRC1:%=standard/%) Standard.oz

Standard.ozf: $(STANDARDSRC)
        $(EXEC) Standard.oz



#---------------------------------------------------------------------
# Remaining functors
#---------------------------------------------------------------------

$(FUNCTORS): Standard.ozf Init.ozc

%.ozf: sp/%.oz
        $(COMPILE) $< -o $@
%.ozf: op/%.oz
        $(COMPILE) $< -o $@
%.ozf: ap/%.oz
        $(COMPILE) $< -o $@
%.ozf: cp/%.oz
        $(COMPILE) $< -o $@
%.ozf: dp/%.oz
        $(COMPILE) $< -o $@
%.ozf: wp/%.oz
        $(COMPILE) $< -o $@
%.ozf: misc/%.oz
        $(COMPILE) $< -o $@
%.ozf: %.oz
        $(COMPILE) $< -o $@

# ap dependencies
Application.ozf: ap/ArgParser.oz

# op dependencies
Open.ozf: op/HtmlTable.oz

# wp dependencies
Tk.ozf: wp/TkInit.oz
TkTools.ozf: wp/TkOptions.oz

# compiler dependencies
COMPILERSRC1 = \
        InsertAll.oz CompilerClass.oz Misc.oz Reporter.oz ParseOz.oz \
        FormatStrings.oz Builtins.oz CoreLanguage.oz Annotate.oz \
        StaticAnalysis.oz POTypes.oz CodeGen.oz CodeStore.oz \
        CodeEmitter.oz BindingAnalysis.oz TupleSyntax.oz Unnester.oz \
        UnnestFD.oz Assembler.oz Interface.oz \
        GenericInterface.oz QuietInterface.oz

COMPILERSRCNOVER = \
        $(COMPILERSRC1:%=compiler/%) \
        compiler-Builtins.oz compiler-Opcodes.oz Compiler.oz

COMPILERSRC = $(COMPILERSRCNOVER) compiler-Version.oz

compiler-Version.oz: $(COMPILERSRCNOVER) compiler/Opcodes.m4oz
        echo 'DATE = '\'`date '+%h %d 19%y (%T)'`\' > $@ \
        || (rm -f $@; exit 1)

compiler-Builtins.oz: ../../platform/emulator/bidecl.perl
        $(PERL) $< -oztable \
        -exclude wif,fd,libfd,libschedule,fset,libfset,libparser > $@

compiler-Opcodes.oz: compiler/Opcodes.m4oz ../../platform/emulator/instrDefs.m4
        $(M4) -DEMUDIR=$(SRCDIR)/../../platform/emulator < $< > $@ \
        || (rm -f $@; exit 1)

Compiler.ozf: $(COMPILERSRC)



#---------------------------------------------------------------------
# Syslets
#---------------------------------------------------------------------

ozc: Standard.ozf MakeBatch.oz BatchCompile.oz
        $(EXECWITHSTD) MakeBatch.oz

ozserver: Standard.ozf MakeOzServer.oz dp/RemoteServer.oz
        $(EXECWITHSTD) MakeOzServer.oz

ozvsserver: Standard.ozf MakeOzVSServer.oz dp/RemoteServer
        $(EXECWITHSTD) MakeOzVSServer.oz

#---------------------------------------------------------------------
# Boot compiler
#---------------------------------------------------------------------

ozc.ozm:
        $(OZMA) -o /tmp/$$$$.ozm MakeAssembly.oz && \
        mv -f /tmp/$$$$.ozm $@

ozc.ozc: ozc.ozm
        OZMAINIT="" OZMAFILE="-b $<" $(SRCDIR)/ozc.sh

#---------------------------------------------------------------------
# Installation
#---------------------------------------------------------------------

LIBFUNCTORS = \
        $(FUNCTORS:%=$(OZLIB)/%) $(OZLIB)/Init.ozc
BINFILES = \
        $(SYSLETS:%=$(OZBIN)/%)
STAGEEXTRAFILES = \
        $(OZLIB)/Standard.ozf $(OZLIB)/ozc.ozm \
        $(OZLIB)/ozc.ozc

.PHONY: install install-stage install-main install-images install-cache

install: install-main install-images install-cache


install-stage: install-main $(STAGEEXTRAFILES)

install-main: all \
        $(OZLIB) $(LIBFUNCTORS) \
        $(OZBIN) $(BINFILES)

IMAGES1 = mini-dec.xbm mini-inc.xbm
IMAGES = $(IMAGES1:%=$(IMAGESDIR)/%)

install-images: \
        $(IMAGESDIR) $(IMAGES)

CACHEDIR  = $(PREFIX)/cache/http/www.ps.uni-sb.de
CACHELINK = $(CACHEDIR)/ozhome

install-cache: \
        $(CACHEDIR) $(CACHELINK)

$(CACHEDIR):
        $(INSTALL_DIR) $(CACHEDIR)

$(CACHELINK): $(CACHEDIR)
        $(LN_S)  $(PREFIX) $(CACHELINK)

$(OZLIB) $(IMAGESDIR) $(OZBIN):
        $(INSTALL_DIR) $@

$(OZLIB)/%.ozf: %.ozf
        $(INSTALL_FILE) $< $@

$(OZLIB)/%.ozc: %.ozc
        $(INSTALL_FILE) $< $@

$(OZLIB)/%.ozm: %.ozm
        $(INSTALL_FILE) $< $@

$(IMAGESDIR)/%: images/%
        $(INSTALL_FILE) $< $@

$(OZBIN)/%: %
        $(INSTALL_BIN) $< $@

#---------------------------------------------------------------------
# Automatic Makefile update
#---------------------------------------------------------------------

Makefile-lilo: Makefile-lilo.in ../config.status
        cd .. && ./config.status

../config.status: ../configure
        cd .. && ./config.status --recheck


#---------------------------------------------------------------------
# Cleaning up
#---------------------------------------------------------------------

.PHONY: clean veryclean distclean tags

clean:
        -rm -f *~ *.bak
        -rm -f compiler-Version.oz compiler-Builtins.oz compiler-Opcodes.oz
        -rm -f $(FUNCTORS) Standard.ozf
        -rm -f $(SYSLETS)

veryclean: clean
        -rm -f -r TAGS $(STAGE1) $(STAGE2) $(STAGE2B) $(STAGE3) $(STAGE3B)

distclean: veryclean
        -rm -f Makefile

tags:
        etags --language=none \
        --regex='/[ \t]*proc\>[^{\n]*{!?\([A-Z][A-Za-z0-9_]*\|`.+`\)/\1/' \
        --regex='/[ \t]*fun\>[^{\n]*{!?\([A-Z][A-Za-z0-9_]*\|`.+`\)/\1/' \
        --regex='/[ \t]*class[ \t]+!?\([A-Z][A-Za-z0-9_]*\|`.+`\)/\1/' \
        --regex='/[ \t]*meth\([ \t]+\|[ \t]*![ \t]*\)\([A-Za-z0-9][A-Za-z0-9_]*\|`.+`|'\''.+'\''\)/\2/' \
        $(ALLSRCS)

#---------------------------------------------------------------------
# Bootstrapping and Testing Components Locally
#---------------------------------------------------------------------
#    make check   or   make thorough-check
# Test a new emulator with
#    make check OZEMULATOR=$(HOME)/Oz/Emulator/oz.emulator.bin

.PHONY: bootstrap stage1 stage2 stage2b stage3 stage3b check thorough-check newozma

URL=http\\://www.ps.uni-sb.de/ozhome

# use Ozma to create the components
bootstrap:
        $(MAKE) ozc.ozc all \
        OZC=$(SRCDIR)/ozc.sh \
        OZINIT=Init.ozc \
        OZ_LIB=. \
        OZ_LOAD=root=.:prefix=$(URL)/lib/=./:=

STAGE1=./stage1
STAGE2=./stage2
STAGE2B=./stage2b
STAGE3=./stage3
STAGE3B=./stage3b

# stage1: create the initial components using the installed ones
stage1:
        $(MAKE) install-main PREFIX=$(STAGE1)

# stage2: recreate the components and Ozma file using the stage1 components
stage2:
        mv $(SRCDIR)/ozc.ozm ozc.ozm.save
        trap "s=$$?;mv ozc.ozm.save $(SRCDIR)/ozc.ozm; trap 0 1 2 15; exit $$s" 0 1 2 15; \
        $(MAKE) install-stage PREFIX=$(STAGE2) \
        OZ_LOAD=prefix=$(URL)/lib/=$(STAGE1)/lib/:.:=\
        OZC=$(STAGE1)/bin/ozc \
        OZINIT=$(STAGE1)/lib/Init.ozc


# stage2b: recreate the components and Ozma file using the stage2 components
stage2b:
        mv $(SRCDIR)/ozc.ozm ozc.ozm.save
        trap "s=$$?;mv ozc.ozm.save $(SRCDIR)/ozc.ozm; trap 0 1 2 15; exit $$s" 0 1 2 15; \
        $(MAKE) install-stage PREFIX=$(STAGE2B) \
        OZ_LOAD=prefix=$(URL)/lib/=$(STAGE2)/lib/:prefix=$(URL)/tools/=$(URL)/tools/:.:=\
        OZC=$(STAGE2)/bin/ozc \
        OZINIT=$(STAGE2)/lib/Init.ozc

# stage3: recreate the components and Ozma file using the stage2 Ozma file
stage3:
        $(MAKE) ozc.ozc install-stage PREFIX=$(STAGE3) \
        OZ_LOAD=all=.:all=tyc/lib:all=tyc/tools:prefix=$(URL)/tools/=$(URL)/tools/:= \
        OZC=$(SRCDIR)/ozc.sh \
        OZINIT=$(STAGE2)/lib/Init.ozc \
        OZMAINIT=$(STAGE2)/lib/Init.ozc \
        OZMAFILE="-u $(STAGE2)/lib/ozc.ozc"

# stage3b: recreate the components and Ozma file using the stage3 components
stage3b:
        $(MAKE) install-stage PREFIX=$(STAGE3B) \
        OZ_LOAD=prefix=$(URL)/lib/=$(STAGE3)/lib/:prefix=$(URL)/tools/=$(URL)/tools/:.:=\
        OZC=$(STAGE3)/bin/ozc \
        OZINIT=$(STAGE3)/lib/Init.ozc

# for making incompatible changes to instructions
#  1. make newozma                 # create new ozc.ozm with old emulator
#  2. make bootstrap OZEMULATOR=.. # bootstrap again with new emulator
newozma:
        $(MAKE) clean
        $(MAKE) stage1 OZFLAGS="-DNO_ASSEMBLER"
        $(MAKE) clean
        $(MAKE) ozc.ozm \
         OZ_LOAD=prefix=$(URL)/lib/=$(STAGE1)/lib/:.:=\
         OZC=$(STAGE1)/bin/ozc \
         OZINIT=$(STAGE1)/lib/Init.ozc

check:
        $(MAKE) bootstrap stage1 && \
        $(MAKE) clean stage2 && \
        $(MAKE) clean stage3

thorough-check:
        $(MAKE) clean bootstrap stage1 && \
        $(MAKE) clean stage2 && \
        $(MAKE) clean stage2b && \
        $(MAKE) clean stage3 && \
        $(MAKE) clean stage3b

# no suffixes needed
.SUFFIXES:


#
# Currently unused
#

#---------------------------------------------------------------------
# Compiler

#FunMisc.ozc: compiler/Misc.oz $(STANDARD)
#
#FunBuiltins.ozc: compiler/Builtins.oz compiler-Builtins.oz $(STANDARD)
#
#FunSA.ozc: SP-new.env CP-new.env compiler/Misc-new.env \
#       compiler/POTypes.oz compiler/StaticAnalysis.oz $(STANDARD)
#
#FunCode.ozc: SP-new.env compiler/Misc-new.env compiler/CodeStore.oz \
#       compiler/CodeEmitter.oz compiler/CodeGen.oz $(STANDARD)
#
#FunCore.ozc: SP-new.env compiler/Misc-new.env compiler/Annotate.oz \
#       compiler/CoreLanguage.oz $(STANDARD)
#
#FunUnnest.ozc: CP-new.env compiler/Misc-new.env compiler/TupleSyntax.oz \
#       compiler/BindingAnalysis.oz compiler/UnnestFD.oz compiler/Unnester.oz \
#       $(STANDARD)
#
#FunAssembler.ozc: SP-new.env compiler/Assembler.oz compiler-Opcodes.oz \
#       $(STANDARD)
#
#FunCompiler.ozc: SP-new.env compiler/Misc-new.env \
#       compiler/FormatStrings.oz compiler/Reporter.oz compiler/ParseOz.oz \
#       compiler/Interface.oz compiler/CompilerClass.oz \
#       compiler/GenericInterface.oz compiler/QuietInterface.oz \
#       compiler-Version.oz $(STANDARD)
#
#COMPILER_BIG = @COMPILER_BIG@
#COMPILER_FUN = @COMPILER_FUN@
#
#$(COMPILER_BIG): $(DUMPINTRO) $(COMPILERSRC) SP.env CP.env \
#       ../tools/Gump.env Compiler.env Init.ozc
#
#$(COMPILER_FUN): $(DUMPINTRO) SP.env CP.env ../tools/Gump.env Compiler.env \
#       Init.ozc FunMisc.ozc FunBuiltins.ozc FunSA.ozc FunCode.ozc \
#       FunCore.ozc FunUnnest.ozc FunAssembler.ozc FunCompiler.ozc \
#       compiler/FunMake.oz $(TYCS)
#       $(OZC) $(OZFLAGS) --include=DumpIntro.oz -l OP \
#       -c compiler/FunMake.oz -o Compiler.ozc
#
