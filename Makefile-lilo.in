BUILDTOP        = @BUILDTOP@
VPATH           = @srcdir@
SRCDIR          = @srcdir@

PREFIX          = @prefix@
OZPREFIX        = $(PREFIX)

OZBIN           = $(PREFIX)/bin
OZLIB           = $(PREFIX)/lib
IMAGESDIR       = $(OZLIB)/images
CACHEDIR        = $(PREFIX)/cache/http/www.ps.uni-sb.de/ozhome/lib

SHELL           = /bin/sh
LN_S            = @LN_S@
M4              = @M4@

INSTALL         = @INSTALL@
INSTALL_FILE    = $(INSTALL) -m 444
INSTALL_BIN     = $(INSTALL) -m 555
INSTALL_SRC     = @INSTALL_SRC@
INSTALL_DIR     = @INSTALL_DIR@

OZFLAGS         = -DLILO
OZC             = @OZC@

COMPILE         = $(OZC) $(OZFLAGS) --include=DumpIntro.oz -c
EXEC            = $(OZC) $(OZFLAGS)
EXECWITHSTD     = $(OZC) $(OZFLAGS) -l Application --include=DumpIntro.oz
OZMA            = $(OZC) $(OZFLAGS) -DOZM --ozma

# exports
export BUILDTOP
export SRCDIR
export OZPREFIX
export OZLIB
export OZMAINIT = Init.ozc
export OZMAFILE = -u ozbatch.ozc
export OZPATH = .:$(SRCDIR)
export OZ_PI = 1
export OZ_LIB = $(OZLIB)
export OZ_LOAD = root=.:prefix=http\://www.ps.uni-sb.de/ozhome/lib/=tyc/:prefix=http\://www.ps.uni-sb.de/ozhome/lib/=$(OZ_LIB)/

STANDARDSRC1 = \
        Forward.oz \
        Record.oz Unit.oz Tuple.oz Atom.oz Name.oz Procedure.oz \
        Int.oz Float.oz Number.oz Bool.oz List.oz Chunk.oz \
        Literal.oz Value.oz Cell.oz Lock.oz Char.oz String.oz \
        VirtualString.oz Object.oz Class.oz Loop.oz Port.oz \
        Time.oz Thread.oz Match.oz Type.oz Space.oz \
        Array.oz Dictionary.oz Exception.oz Lazy.oz Promise.oz \
        Functor.oz BitArray.oz

STANDARDSRC = $(STANDARDSRC1:%=standard/%) Standard.oz

STANDARD = Base.ozp Standard.ozp Base.env Standard.env
DUMPINTRO = DumpIntro.oz $(STANDARD)

INITSRC1 = URL.oz Prop.oz
INITSRC = $(INITSRC1:%=init/%) Init.oz

SPSRC = System Debug Foreign Error Finalize
OPSRC = OS Open Component
APSRC = Application
CPSRC = Search FD FS
DPSRC = Connection Remote
WPSRC = Tk TkTools

FUNCTORS = \
        $(SPSRC:%=%.ozf) \
        $(OPSRC:%=%.ozf) \
        $(APSRC:%=%.ozf) \
        $(CPSRC:%=%.ozf) \
        $(DPSRC:%=%.ozf) \
        $(WPSRC:%=%.ozf) \
        Compiler.ozf

SYSLETS = \
        ozc

.PHONY: all install clean

all: $(FUNCTORS) $(SYSLETS)

Init.ozp: $(DUMPINTRO) $(INITSRC)
        OZMAINIT="" $(COMPILE) Init.oz -o Init.ozp

Base.ozp: Standard.ozp
        @echo > /dev/null

Standard.ozp: $(STANDARDSRC) Base.env Standard.env
        OZMAINIT="" $(EXEC) DumpInitial.oz



$(FUNCTORS): Init.ozp Standard.ozp Base.ozp


%.ozf: sp/%.oz
        $(COMPILE) $< -o $@
%.ozf: op/%.oz
        $(COMPILE) $< -o $@
%.ozf: ap/%.oz
        $(COMPILE) $< -o $@
%.ozf: cp/%.oz
        $(COMPILE) $< -o $@
%.ozf: dp/%.oz
        $(COMPILE) $< -o $@
%.ozf: wp/%.oz
        $(COMPILE) $< -o $@
%.ozf: %.oz
        $(COMPILE) $< -o $@


# ap dependencies
Application.ozf: ap/ArgParser.oz

# op dependencies
Open.ozf: op/HtmlTable.oz

# wp dependencies
Tk.ozf: wp/TkInit.oz
TkTools.ozf: wp/TkOptions.oz

# compiler dependencies
COMPILERSRC1 = \
        InsertAll.oz CompilerClass.oz Misc.oz Reporter.oz ParseOz.oz \
        FormatStrings.oz Builtins.oz CoreLanguage.oz Annotate.oz \
        StaticAnalysis.oz POTypes.oz CodeGen.oz CodeStore.oz \
        CodeEmitter.oz BindingAnalysis.oz TupleSyntax.oz Unnester.oz \
        UnnestFD.oz Assembler.oz Interface.oz \
        GenericInterface.oz QuietInterface.oz

COMPILERSRCNOVER = \
        $(COMPILERSRC1:%=compiler/%) \
        compiler-Builtins.oz compiler-Opcodes.oz Compiler.oz

COMPILERSRC = $(COMPILERSRCNOVER) compiler-Version.oz

compiler-Version.oz: $(COMPILERSRCNOVER) compiler/Opcodes.m4oz
        echo 'DATE = '\'`date '+%h %d 19%y (%T)'`\' > $@ \
        || (rm -f $@; exit 1)

compiler-Builtins.oz: ../../platform/emulator/bidecl.perl
        $(PERL) $< -oztable \
        -exclude wif,fd,libfd,libschedule,fset,libfset,libparser > $@

compiler-Opcodes.oz: compiler/Opcodes.m4oz ../../platform/emulator/instrDefs.m4
        $(M4) -DEMUDIR=$(SRCDIR)/../../platform/emulator < $< > $@ \
        || (rm -f $@; exit 1)

Compiler.ozf: $(COMPILERSRC)



#
# Syslets
#

ozc: MakeBatch.oz BatchCompile.oz $(DUMPINTRO)
        $(EXECWITHSTD) $<


#
# Installation
#

LIBFUNCTORS = \
        $(FUNCTORS:%=$(OZLIB)/%)
CACHEFUNCTORS = \
        $(FUNCTORS:%=$(CACHEDIR)/%)
BINSYSLETS = \
        $(SYSLETS:%=$(OZBIN)/%)

install: $(LIBFUNCTORS) $(CACHEFUNCTORS) $(BINSYSLETS)

$(OZLIB) $(OZBIN) $(CACHEDIR):
        $(INSTALL_DIR) $@

$(OZLIB)/%.ozf: %.ozf
        $(INSTALL_FILE) $< $@

$(CACHEDIR)/%.ozf: %.ozf
        $(INSTALL_FILE) $< $@

$(OZBIN)/%: %
        $(INSTALL_BIN) $< $@

#
# Automatic Makefile update
#

Makefile-lilo: Makefile-lilo.in ../config.status
        cd .. && ./config.status

../config.status: ../configure
        cd .. && ./config.status --recheck


#---------------------------------------------------------------------
# Cleaning up
#---------------------------------------------------------------------

.PHONY: clean veryclean distclean tags

clean:
        -rm -f *~ *.bak
        -rm -f compiler-Version.oz compiler-Builtins.oz compiler-Opcodes.oz
        -rm -f $(FUNCTORS)
        -rm -f $(SYSLETS)

veryclean: clean
        -rm -f -r TAGS $(STAGE1) $(STAGE2) $(STAGE2B) $(STAGE3) $(STAGE3B)

distclean: veryclean
        -rm -f Makefile

tags:
        etags --language=none \
        --regex='/[ \t]*proc\>[^{\n]*{!?\([A-Z][A-Za-z0-9_]*\|`.+`\)/\1/' \
        --regex='/[ \t]*fun\>[^{\n]*{!?\([A-Z][A-Za-z0-9_]*\|`.+`\)/\1/' \
        --regex='/[ \t]*class[ \t]+!?\([A-Z][A-Za-z0-9_]*\|`.+`\)/\1/' \
        --regex='/[ \t]*meth\([ \t]+\|[ \t]*![ \t]*\)\([A-Za-z0-9][A-Za-z0-9_]*\|`.+`|'\''.+'\''\)/\2/' \
        $(ALLSRCS)
